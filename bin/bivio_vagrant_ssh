#!/usr/bin/env bash
#
# Cache how vagrant makes the ssh connection, because at least 3 seconds faster
# since don't have to startup Ruby.
#
# Also gives us a hook for checking guest additions
#

# State between runs
state_file=.vagrant/.bivio_vagrant_ssh.sh

# Load stored state
. "$state_file" 2>/dev/null

# Computed host version
host_version=$(perl -e 'print((`VBoxManage --version` =~ /^([\d\.]+)/)[0])')

check_vm_state() {
    local vbox_id=$(cat .vagrant/machines/default/virtualbox/id 2>/dev/null)
    if [[ ! $vbox_id ]]; then
        return 1
    fi
    eval $(VBoxManage showvminfo "$vbox_id" --machinereadable 2>/dev/null | egrep -s '^(VMState|GuestAdditionsVersion)')
    guest_version=${GuestAdditionsVersion% *}
    is_running=
    if [[ $VMState == running ]]; then
        is_running=1
    fi
}

exec_ssh() {
    exec $ssh_cmd "$@"
    echo 'Something went seriously wrong. Try "vagrant ssh" or "vagrant status"' 1>&2
    exit 1
}

# Normal case up front so runs the fastest
check_vm_state
if [[ $is_running && $ssh_cmd \
            && $last_vm_boot == $VMStateChangeTime \
            && $host_version == $guest_version ]]; then
    exec_ssh "$@"
fi

#
# All the special cases are below
#

# Where ssh outputs errors (below)
ssh_err_file=.vagrant/.bivio_vagrant_ssh.log

err_exit() {
    user_msg "$1"
    if [[ ! -z $ssh_err_file ]]; then
        cat "$ssh_err_file"
    fi
    exit 1
}

user_msg() {
    echo "$1" 1>&2
}

if [[ ! $host_version ]]; then
    err_exit 'VBoxManage needs to be in $PATH to work.'
fi

if [[ ! -f Vagrantfile ]]; then
    err_exit 'You need to initialize vagrant, e.g. "vagrant init radiasoft/fedora"'
fi

if [[ ! $is_running ]]; then
    user_msg 'VM not running. Booting... (may take a few minutes)'
    # This may fail due to a guest update problem so we have to check running
    vagrant up
    check_vm_state
    if [[ ! $is_running ]]; then
        err_exit 'Unable to boot VM (see above)'
    fi
fi

if [[ $guest_version != $host_version ]]; then
    user_msg 'VirtualBox guest software needs updating ... (may take tens of minutes)'
    update_script=.vbox-guest-update.sh
    vagrant ssh -c "dd of='$update_script'; sudo host_version='$host_version' bash '$update_script'" <<'EOF'
rm -f "${BASH_SOURCE[0]}"
iso=VBoxGuestAdditions_$host_version.iso

clean_up() {
    set +e
    trap - EXIT
    cd
    umount /mnt &> /dev/null
    rm -f "$iso"
}
trap clean_up EXIT

#TODO(robnagler) Is this robust enough?
rpms=$(rpm -qa | grep VirtualBox)
if [[ $rpms ]]; then
    yum remove -y -q $rpms || true
fi

set -e
echo 'Downloading VirtualBox guest software'
curl --progress-bar -L -O "http://download.virtualbox.org/virtualbox/$host_version/$iso"
mount -t iso9660 -o loop,rw "$iso" /mnt

# Returns false even when it succeeds, if the reload fails (next),
# then the guest additions didn't get added right (or something else
# is wrong). Sometimes this prompts, but if it does, ignore it as we
# can't make this that robust. If there is no ~/RadTrack, then we will
# have a failure anyway.
sh /mnt/VBoxLinuxAdditions.run < /dev/null || true
EOF
    if (( $? != 0 )); then
        err_exit 'Upgrade failed. See output'
    fi
    user_msg 'Rebooting virtual machine... (may take a few minutes)'
    vagrant reload
    check_vm_state
    if [[ ! $is_running ]]; then
        err_exit 'Unable to reload VM (see above)'
    fi
    if [[ $guest_version != $host_version ]]; then
        err_exit 'Unable to update VirtualBox guest software.'
    fi
fi

user_msg 'Extracting virtual machine ssh command ... (may take a few seconds)'

vagrant ssh -c 'sleep 2' > $ssh_err_file 2>&1 < /dev/null &
child=$!
declare -i i=0
while (( $i < 6 )); do
    ssh_cmd=$(ps axww | grep ' ssh vagrant@.*sleep' | grep -v ' grep ')
    if [[ $ssh_cmd ]]; then
        break
    fi
    sleep 1
done

if [[ ! $ssh_cmd ]]; then
    err_exit 'Unable to access virtual machine:' "$ssh_err_file"
fi

i=0
while ps "$child" &>/dev/null; do
    if (( $i > 5 )); then
        kill -9 "$child"
        err_exit 'Remote process had to be killed:'  "$ssh_err_file"
    fi
    sleep 1
    i+=1
done
rm -f "$ssh_err_file"

ssh_cmd=${ssh_cmd#* ssh }
# Obviously only works with Unix hosts
ssh_cmd="ssh ${ssh_cmd% -t bash -l*}"
# FATAL outputs nothing on error so switch to ERROR
ssh_cmd=${ssh_cmd/LogLevel=FATAL/LogLevel=ERROR}

cat > "$state_file" <<EOF
ssh_cmd='$ssh_cmd'
last_vm_boot='$VMStateChangeTime'
EOF

user_msg 'Starting ssh...'

exec_ssh "$@"
