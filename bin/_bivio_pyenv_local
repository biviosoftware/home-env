#!/usr/bin/env bash
#
# Initialize a project directory with a local virtualenv. Take care to install
# special packages (see below).
#
# Usage: . $0
#
if [[ ! -d .git ]]; then
    echo 'No .git directory in pwd' 1>&2
    echo 'cd to the project directory' 1>&2
    return 1
fi

local global_env=$(pyenv global 2>/dev/null)
if [[ ! $global_env ]]; then
    echo 'No global pyenv version' 1>&2
    echo 'Create one, e.g. run: bivio_pyenv_2' 1>&2
    return 1
fi

local project_dir=$(pwd)
local project=$(basename "$project_dir")
local venv=$(pyenv local 2> /dev/null)

# Make sure venv exists
if [[ $venv ]]; then
    if ! pyenv activate "$venv" >& /dev/null; then
        rm -f .python-version
        venv=
    # If already have a local, make sure it's named corrrectly
    elif [[ $project != $venv ]]; then
        echo "project ($project) is not same as virtualenv ($venv)" 1>&2
        echo "You may want to: pyenv uninstall $venv" 1>&2
        echo "And then: rm .python-version" 1>&2
        return 1
    fi
fi

# Create the local virtualenv
if [[ ! $venv ]]; then
    venv="$project"
    (
        cd ..
        pyenv virtualenv "$global_env" "$venv"
    )
    if [[ ! -f requirements.txt ]]; then
        pyenv local "$venv"
    else
        # pyenv will automatically install requirements.txt,
        # but this doesn't work in a couple of cases (see below)
        # so remove requirements.txt temporarily
        local tmp=requirements.tmp
        rm -f "$tmp"
        cleanup() {
            local e=$?
            if [[ -f $tmp ]]; then
                mv "$tmp" requirements.txt
            fi
            exit "$e"
        }
        trap cleanup EXIT
        # pyenv will automatically load requirements.txt
        mv requirements.txt "$tmp"
        pyenv local "$venv"
        mv "$tmp" requirements.txt
        trap - EXIT
    fi
fi

# install numpy manually, because needs to be installed before scipy
if [[ $(egrep '^numpy\W' requirements.txt 2>/dev/null) ]]; then
    pip install "$numpy"
fi

# install pybivio
if [[ pybivio != $project ]]; then
    if [[ ! -d ~/src/biviosoftware/pybivio ]]; then
        mkdir -p ~/src/biviosoftware >& /dev/null
        (
            cd ~/src/biviosoftware
            git clone https://github.com/biviosoftware/pybivio
        )
    fi
    (
        cd ~/src/biviosoftware/pybivio
        pyenv deactivate >& /dev/null
        pyenv activate "$venv"
        python setup.py develop
    )
fi

# install $project
pyenv activate
if [[ -f setup.py ]]; then
    python setup.py develop
elif [[ -f requirements.txt ]]; then
    pip install -r requirements.txt
fi
