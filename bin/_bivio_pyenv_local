#!/usr/bin/env bash
#
# Initialize a project directory with a local virtualenv. Take care to install
# special packages (see below).
#
# Usage: . $0
#
if ! [[ -d .git || -r setup.py || -r requirements.txt ]]; then
    echo 'No .git, setup.py or requirements.txt in pwd' 1>&2
    echo 'cd to the project directory' 1>&2
    return 1
fi

local global_env=$(pyenv global 2>/dev/null || true)
if [[ ! $global_env ]]; then
    echo 'No global pyenv version' 1>&2
    echo 'Create one, e.g. run: bivio_pyenv_2' 1>&2
    return 1
fi

local project_dir=$(pwd)
local project=$(basename "$project_dir")
local venv=$(pyenv local 2> /dev/null || true)

# Make sure venv exists
if [[ $venv ]]; then
    if ! pyenv activate "$venv" >& /dev/null; then
        rm -f .python-version
        venv=
    # If already have a local, make sure it's named corrrectly
    elif [[ $project != $venv ]]; then
        echo "project ($project) is not same as virtualenv ($venv)" 1>&2
        echo "You may want to: pyenv uninstall $venv" 1>&2
        echo "And then: rm .python-version" 1>&2
        return 1
    fi
fi

# Create the local virtualenv
if [[ ! $venv ]]; then
    venv="$project"
    (
        set -e
        cd ..
        pyenv virtualenv "$global_env" "$venv"
    ) || return $?
    if [[ ! -f requirements.txt ]]; then
        pyenv local "$venv" || return $?
    else
        (
            set  -e
            # pyenv will automatically install requirements.txt,
            # but this doesn't work in a couple of cases (see below)
            # so remove requirements.txt temporarily
            local tmp=requirements.tmp
            rm -f "$tmp"
            trap "[[ -f $tmp ]] && mv -f '$tmp' requirements.txt" EXIT
            set -e
            # pyenv will automatically load requirements.txt
            mv requirements.txt "$tmp"
            pyenv local "$venv"
        ) || return $?
    fi
fi

pyenv activate "$venv" || return ?

# install numpy manually, because needs to be installed before scipy
local pkg=$(egrep '^numpy\W' requirements.txt 2>/dev/null || true)
if [[ $pkg ]]; then
    pip install "$pkg" || return $?
fi

# install pybivio always from local copy
if [[ pybivio != $project && $(grep -s '^pybivio' requirements.txt) ]]; then
    if [[ ! -d ~/src/biviosoftware/pybivio ]]; then
        (
            set -e
            mkdir -p ~/src/biviosoftware >& /dev/null
            cd ~/src/biviosoftware
            git clone ${BIVIO_GIT_SERVER-https://github.com}/biviosoftware/pybivio.git
        ) || return $?
    fi
    (
        set -e
        cd ~/src/biviosoftware/pybivio
        bivio_pyenv_deactivate
        pyenv activate "$venv"
        python setup.py develop
    ) || return $?
fi

# install $project
pyenv activate "$venv" || return $?
if [[ -f setup.py ]]; then
    python setup.py develop || return $?
elif [[ -f requirements.txt ]]; then
    pip install -r requirements.txt || return $?
fi

# PyQt4 to be after pip requirements.txt since may contain dependencies
# in the requirements.txt. There can't be a dependency on PyQt4 so can be last.
if grep -s -q '# *PyQt4' requirements.txt; then
    (
        set -e
        build_qt_pkg() {
            local tgz=$1.tar.gz
            shift
            # Put tmp local to user
            local tmp=~/tmp/build_qt_pkg
            trap "cd; rm -rf '$tmp'" EXIT
            rm -rf "$tmp"
            mkdir -p "$tmp"
            cd "$tmp"
            curl -s -S -L -O "${BIVIO_FOSS_MIRROR-https://depot.radiasoft.org/foss}/$tgz"
            tar xzf "$tgz"
            rm -f "$tgz"
            cd *
            python configure.py "$@"
            make
            make install
        }
        build_qt_pkg sip --incdir="$VIRTUAL_ENV/include"
        build_qt_pkg PyQt4 --confirm-license -q /usr/lib64/qt4/bin/qmake
    ) || return $?
fi

bivio_pyenv_deactivate
