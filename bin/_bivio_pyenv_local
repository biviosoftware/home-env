#!/usr/bin/env bash
#
# Initialize a python directory with a local virtualenv. Take care to install
# special packages (see below).
#
# Usage: . $0
#
if ! [[ -r setup.py || -r requirements.txt ]]; then
    echo 'No setup.py or requirements.txt in current directory' 1>&2
    return 1
fi

local global_env=$(pyenv global 2>/dev/null || true)
if [[ ! $global_env ]]; then
    echo 'No global pyenv version' 1>&2
    echo 'Create one, e.g. run: bivio_pyenv_2' 1>&2
    return 1
fi

local new_venv=$(basename "$PWD")
local curr_venv=$(pyenv local 2>/dev/null || true)

# Make sure venv exists
if [[ $curr_venv ]]; then
    if ! pyenv activate "$curr_venv" >& /dev/null; then
        rm -f .python-version
        curr_venv=
    # If already have a local, make sure it's named corrrectly
    elif [[ $new_venv != $curr_venv ]]; then
        echo "directory ($new_venv) is not same as virtualenv ($curr_venv)" 1>&2
        echo "You may want to: pyenv uninstall $curr_venv" 1>&2
        echo "And then: rm .python-version" 1>&2
        return 1
    fi
fi

# Create the local virtualenv
if [[ ! $curr_venv ]]; then
    (
        set -e
        cd ..
        pyenv virtualenv "$global_env" "$new_venv"
    ) || return $?
    if [[ ! -f requirements.txt ]]; then
        pyenv local "$new_venv" || return $?
    else
        (
            set  -e
            # pyenv will automatically install requirements.txt,
            # but this doesn't work in a couple of cases (see below)
            # so remove requirements.txt temporarily
            local tmp=requirements.tmp
            rm -f "$tmp"
            trap "[[ -f $tmp ]] && mv -f '$tmp' requirements.txt" EXIT
            set -e
            # pyenv will automatically load requirements.txt
            mv requirements.txt "$tmp"
            pyenv local "$new_venv"
        ) || return $?
    fi
fi

pyenv activate "$new_venv" || return ?

local pkg=
need_install() {
    local p=$1
    local required=$2
    if [[ $p == $new_venv ]]; then
        return 1
    fi
    if [[ ! $required ]]; then
        local pat="^$p"
        if [[ $p == PyQt4 ]]; then
            # PyQt4 cannot be listed (see discussion below)
            pat="^#?$p"
        fi
        pkg=$(egrep "$pat" requirements.txt 2>/dev/null || true)
        if [[ ! $pkg ]]; then
            return 1
        fi
    fi
    if python -c "import $p" 2>/dev/null; then
        return 1
    fi
}

# install numpy manually, because needs to be installed before
# "pip install -r requirements.txt' if scipy is in requirements.txt
if need_install numpy; then
    pip install "$pkg" || return $?
fi

# install pykern always from local copy
if need_install pykern; then
    if [[ ! -d ~/src/radiasoft/pykern ]]; then
        (
            set -e
            mkdir -p ~/src/radiasoft
            cd ~/src/radiasoft
            git clone ${BIVIO_GIT_SERVER-https://github.com}/radiasoft/pykern.git
        ) || return $?
    fi
    (
        set -e
        cd ~/src/radiasoft/pykern
        bivio_pyenv_deactivate
        pyenv activate "$new_venv"
        pip install -r requirements.txt
        python setup.py develop
    ) || return $?
fi

# install $new_venv or its requirements
pyenv activate "$new_venv" || return $?
if [[ -f setup.py ]]; then
    python setup.py develop || return $?
else
    # Must be here
    pip install -r requirements.txt || return $?
fi

# PyQt4 to be after pip requirements.txt since may contain dependencies
# in the requirements.txt. There can't be a dependency on PyQt4 so can be last.
if need_install PyQt4; then
    local qt=
    local qmake=
    for qt in "$VIRTUAL_ENV" /usr/local/qt-4.* /opt/local /usr/lib64/qt4; do
        qmake=$qt/bin/qmake
        if [[ -x $qmake ]]; then
            break
        fi
    done
    if [[ ! $qmake ]]; then
        echo 'qmake not found. Need for PyQt4.' 1>&2
        return 1
    fi
    (
        set -e
        build_qt_pkg() {
            local tgz=$1.tar.gz
            shift
            # Put tmp local to user
            local tmp=~/tmp/build_qt_pkg
            trap "cd; rm -rf '$tmp'" EXIT
            rm -rf "$tmp"
            mkdir -p "$tmp"
            cd "$tmp"
            curl -s -S -L -O "${BIVIO_FOSS_MIRROR-https://depot.radiasoft.org/foss}/$tgz"
            tar xzf "$tgz"
            rm -f "$tgz"
            cd *
            # Need to see if static is required
            python configure.py "$@"
            make
            make install
        }
        if need_install sip 1; then
            build_qt_pkg sip --incdir="$VIRTUAL_ENV/include"
        fi
        build_qt_pkg PyQt4 --confirm-license -q "$qmake"
    ) || return $?

fi

# PROMPT_COMMAND will set venv after this command exits
bivio_pyenv_deactivate
