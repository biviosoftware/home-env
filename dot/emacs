; -*-emacs-lisp-*-
(let
    ;; Reversed, because add-to-list inserts in front of list
  ((dirs '("~/src/biviosoftware/home-env/emacs.d" "~/emacs" "~/.emacs.d/lisp")))
  (dolist (p dirs)
    (add-to-list 'load-path p))
    ;; add descendant dirs too
    (let ((default-directory  (car dirs)))
        (normal-top-level-add-subdirs-to-load-path)))
(ignore-errors
    (require 'pre-bivio-init))
(require 'bivio-init)
(ignore-errors
    (require 'post-bivio-init))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values '((eval sh-set-shell "rpm" nil nil)))
 '(warning-suppress-types '((comp))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cperl-array-face ((t (:foreground "black"))))
 '(cperl-hash-face ((t (:foreground "black"))))
 '(diff-added-face ((t (:foreground "blue" :weight bold))))
 '(diff-changed-face ((t (:foreground "magenta" :weight extra-bold))))
 '(diff-context-face ((((class color) (background dark)) (:foreground "black"))))
 '(diff-file-header-face ((t nil)))
 '(diff-header-face ((t nil)))
 '(diff-removed-face ((t (:foreground "red" :weight bold))))
 '(font-lock-builtin-face ((t (:foreground "cyan"))))
 '(font-lock-comment-face ((t (:foreground "magenta"))))
 '(font-lock-constant-face ((t (:foreground "cyan"))))
 '(font-lock-doc-face ((t (:foreground "magenta"))))
 '(font-lock-function-name-face ((t (:foreground "blue"))))
 '(font-lock-keyword-face ((t (:foreground "cyan"))))
 '(font-lock-string-face ((t (:foreground "magenta"))))
 '(font-lock-type-face ((t (:foreground "green"))))
 '(font-lock-variable-name-face ((t (:foreground "blue"))))
 '(minibuffer-prompt ((((background dark)) nil)))
 '(mmm-cleanup-submode-face ((t (:background nil))))
 '(mmm-code-submode-face ((t (:background nil))))
 '(mmm-comment-submode-face ((t (:background nil))))
 '(mmm-declaration-submode-face ((t (:background nil))))
 '(mmm-default-submode-face ((t (:foreground "red" :background nil))))
 '(mmm-init-submode-face ((t (:background nil))))
 '(mmm-output-submode-face ((t (:background nil))))
 '(mmm-special-submode-face ((t (:background nil))))
 '(rst-level-1 ((t nil)))
 '(sh-heredoc ((t (:foreground "magenta"))))
 '(web-mode-html-attr-name-face ((t (:foreground "cyan"))))
 '(web-mode-html-attr-value-face ((t (:foreground "magenta"))))
 '(web-mode-html-tag-bracket-face ((t (:foreground "blue"))))
 '(web-mode-html-tag-face ((t (:foreground "blue")))))
